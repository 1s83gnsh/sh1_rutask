<?php
namespace App\Libraries;

use PDO;
use PDOException;

class Model {
    protected $conn;
    protected $error;
    protected $query;

    public function __construct($db_config = null) {
        global $db_config;
        $config = $db_config ?? $db_config['default'];
        try {
            $dsn = "{$config['driver']}:host={$config['server']};dbname={$config['dbname']}";
            $this->conn = new PDO($dsn, $config['user'], $config['pass'], [
                PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_OBJ
            ]);
        } catch (PDOException $e) {
            $this->error = $e->getMessage();
        }
    }

    public function getItem(string $query, array $inputs = null) {
        try {
            $stmt = $this->conn->prepare($query);
            $stmt->execute($inputs);
            return $stmt->fetch();
        } catch (PDOException $e) {
            $this->error = $e->getMessage();
            return false;
        }
    }

    public function getItems(string $query, array $inputs = null) {
        try {
            $stmt = $this->conn->prepare($query);
            $stmt->execute($inputs);
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            $this->error = $e->getMessage();
            return false;
        }
    }

    public function exec(string $query, array $inputs = null) {
        try {
            $stmt = $this->conn->prepare($query);
            return $stmt->execute($inputs);
        } catch (PDOException $e) {
            $this->error = $e->getMessage();
            return false;
        }
    }

    public function lastId(string $field = null) {
        return $this->conn->lastInsertId($field);
    }

    public function startTrans() {
        return $this->conn->beginTransaction();
    }

    public function commit() {
        return $this->conn->commit();
    }

    public function rollback() {
        return $this->conn->rollBack();
    }

    public function getError() {
        return $this->error;
    }
}